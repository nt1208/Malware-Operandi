import pandas as pd  
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
import re

def read_file(file_path):
    with open(file_path, "r", encoding="utf-8") as file:
        lines = file.readlines()
    return lines

def custom_tokenizer(text):
    email_pattern = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
    ip_pattern = r'\b(?:\d{1,3}\.){3}\d{1,3}\b'
    url_pattern = r'https?://\S+\b'
    pattern = re.compile(f'({email_pattern})|({ip_pattern})|({url_pattern})|\w+')
    tokens = pattern.findall(text)
    tokens = [token for sublist in tokens for token in sublist if token != '']
    return tokens

# Đọc dữ liệu từ các tệp
file_network = "feature_net.txt"
file_text = "feature_text.txt"

lines_net = read_file(file_network)
lines_text = read_file(file_text)


custom_stop_words = ['android', 'com']

# Tính TF-IDF cho các đặc trưng text
vectorizer_text = TfidfVectorizer()
X_text = vectorizer_text.fit_transform(lines_text)

# Tính TF-IDF cho các đặc trưng network
vectorizer_network = TfidfVectorizer(tokenizer=custom_tokenizer)
X_network = vectorizer_network.fit_transform(lines_net)


print("TF-IDF Vocabulary (Text):", vectorizer_text.get_feature_names_out())
print("TF-IDF Matrix (Text) IDF_:", vectorizer_text.idf_)
print("TF-IDF Vocabulary (Network):", vectorizer_network.get_feature_names_out())
print("TF-IDF Matrix (Network) IDF_:", vectorizer_network.idf_)


df_text = pd.DataFrame(X_text.toarray(), columns=vectorizer_text.get_feature_names_out())
df_text.to_csv('vectors_text.csv', index=False)

# Xuất vectors network ra file CSV
df_network = pd.DataFrame(X_network.toarray(), columns=vectorizer_network.get_feature_names_out())
df_network.to_csv('vectors_network.csv', index=False)

print("Vectors text đã được xuất ra vectors_text.csv")
print("Vectors network đã được xuất ra vectors_network.csv")

